using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.Reflection;
using Neat.Data.Converters;
using Neat.Data.Schema;

namespace Neat.Data
{
    /// <summary>
    /// Database Query mapper
    /// </summary>
    public class DbQueryMapper : IDisposable
    {
        /// <summary>
        /// The default database provider factory
        /// </summary>
        private const string DefaultDbProviderFactory = "System.Data.SqlClient";

        #region Private Fields

        /// <summary>
        /// The parameter format.
        /// </summary>
        private string _parameterFormat;

        #endregion

        #region Public Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="DBHelper" /> class.
        /// </summary>
        /// <param name="connectionString">The connection string.</param>
        /// <param name="providerName">The database provider.</param>
        public DbQueryMapper(string connectionString, string providerName = DefaultDbProviderFactory)
        {
            if (String.IsNullOrEmpty(connectionString))
            {
                throw new ArgumentException("The connection string cannot be empty.", "connectionString");
            }

            Factory = DbProviderFactories.GetFactory(providerName);
            ConnectionString = connectionString;
        }

        #endregion

        /// <summary>
        /// Gets the current DbCommand
        /// </summary>
        public virtual DbCommand Command { get; set; }

        /// <summary>
        /// Gets or sets the command type
        /// </summary>
        public virtual System.Data.CommandType CommandType
        {
            get
            {
                return this.Command.CommandType;
            }
            set
            {
                if (this.Command != null)
                    this.Command.CommandType = value;
            }
        }

        /// <summary>
        /// Gets or sets the current transaction
        /// </summary>
        public virtual DbTransaction Transaction
        {
            get
            {
                return this.Command.Transaction;
            }
            set
            {
                this.Command.Transaction = value;
            }
        }

        #region Public Properties

        /// <summary>
        /// Gets the connection string.
        /// </summary>
        public string ConnectionString { get; private set; }

        /// <summary>
        /// Gets the factory.
        /// </summary>
        public DbProviderFactory Factory { get; private set; }

        #endregion

        #region Public Methods

        /// <summary>
        /// Returns a builder to execute a query.
        /// </summary>
        /// <param name="commandText">The command text</param>
        public FluentQueryBuilder Query(string commandText) => new FluentQueryBuilder(this).AssignCommand(commandText);

        /// <summary>
        /// Set this property to log the SQL generated by this class to the given delegate. 
        /// For example, to log to the console, set this property to Console.Write.
        /// </summary>
        public virtual Action<string> Log { get; set; }

        private void OperationsBeforeExecution()
        {
            //Update_CommandDotCommandText_If_CommandText_IsNew();

            //// Action Before Execution
            //if (this.ActionBeforeExecution != null)
            //{
            //    this.ActionBeforeExecution.Invoke(this);
            //    Update_CommandDotCommandText_If_CommandText_IsNew();
            //}

            //// Replace null parameters by DBNull value.
            //this.Replace_ParametersNull_By_DBNull();

            // Log
            if (this.Log != null)
                this.Log.Invoke(this.Command.CommandText);
        }

        /// <summary>
        /// Close the connection
        /// </summary>
        /// <param name="connection">the connection to close</param>
        /// <exception cref="System.ArgumentNullException">connection</exception>
        public void CloseConnection(DbConnection connection)
        {
            if (connection == null)
                throw new ArgumentNullException("connection");

            connection.Close();
        }

        /// <summary>
        /// Commit and dispose the transaction
        /// </summary>
        /// <param name="transaction">the transaction to commit</param>
        public void CompleteTransaction(DbTransaction transaction)
        {
            if (transaction != null)
            {
                transaction.Commit();
                if (transaction.Connection != null && transaction.Connection.State != ConnectionState.Closed)
                    transaction.Connection.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// Creates command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters"> The parameters.</param>
        /// <returns>The <see cref="DbCommand">DbCommand</see>.</returns>
        public DbCommand CreateCommand(string commandText, params object[] parameters)
        {
            var len = parameters.Length;

            var command = Factory.CreateCommand();
            if (command != null)
            {
                command.CommandType = CommandType.Text;

                if (len > 0)
                {
                    var formatValues = new string[len];

                    for (var i = 0; i < len; i++)
                    {
                        var parameter = parameters[i];

                        if (parameter != null)
                        {
                            formatValues[i] = parameter.ToString();
                        }
                        else
                        {
                            var dbParameter = Factory.CreateParameter();
                            var name = CreateParameterName(i);

                            if (dbParameter != null)
                            {
                                dbParameter.ParameterName = name;
                                dbParameter.Value = DBNull.Value;

                                formatValues[i] = name;
                                command.Parameters.Add(dbParameter);
                            }
                        }
                    }

                    command.CommandText = String.Format(commandText, formatValues);
                }
                else
                {
                    command.CommandText = commandText;
                }
            }

            return command;
        }

        /// <summary>
        /// Create a connection
        /// </summary>
        /// <returns>the created connection</returns>
        public DbConnection CreateConnection()
        {
            DbConnection connection = Factory.CreateConnection();
            if (connection != null)
            {
                connection.ConnectionString = ConnectionString;
            }
            return connection;
        }

        /// <summary>
        /// Create a transaction
        /// </summary>
        /// <param name="connection">the Database connection</param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentNullException">connection</exception>
        public DbTransaction CreateTransaction(DbConnection connection)
        {
            if (connection == null)
                throw new ArgumentNullException("connection");
            if (connection.State != ConnectionState.Open)
                throw new InvalidOperationException("Open the connection before creating the transaction");
            return connection.BeginTransaction(IsolationLevel.ReadCommitted);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting
        /// unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            if (Factory != null)
                Factory = null;
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">    The command.</param>
        /// <param name="converter">  The converter.</param>
        /// <param name="startRecord">The start record.</param>
        /// <param name="maxRecords"> The max records.</param>
        /// <param name="connection"> The connection.</param>
        /// <returns>The List.</returns>
        public List<T> ExecuteList<T>(DbCommand command, Converter<DbDataReader, T> converter, int startRecord, int maxRecords, DbConnection connection)
        {
            var list = new List<T>();

            using (DbDataReader reader = this.ExecuteReader(command, connection))
            {
                try
                {
                    OperationsBeforeExecution();

                    FillFromReader(reader, startRecord, maxRecords, r => { list.Add(converter(reader)); });

                    reader.Close();
                }
                catch
                {
                    reader.Close();
                    throw;
                }
            }

            return list;
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">    The command.</param>
        /// <param name="converter">  The converter.</param>
        /// <param name="startRecord">The start record.</param>
        /// <param name="maxRecords"> The max records.</param>
        /// <returns>The List.</returns>
        public List<T> ExecuteList<T>(DbCommand command, Converter<DbDataReader, T> converter, int startRecord, int maxRecords)
        {
            List<T> list;

            using (DbConnection connection = this.CreateConnection())
            {
                try
                {
                    connection.Open();

                    list = this.ExecuteList(command, converter, startRecord, maxRecords, connection);

                    connection.Close();
                }
                catch
                {
                    if (command != null)
                    {
                        command.Dispose();
                    }
                    if (connection != null)
                    {
                        connection.Close();
                        connection.Dispose();
                    }

                    throw;
                }
            }

            return list;
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">  The command.</param>
        /// <param name="converter">The converter.</param>
        /// <returns>The List.</returns>
        public List<T> ExecuteList<T>(DbCommand command, Converter<DbDataReader, T> converter)
        {
            return this.ExecuteList<T>(command, converter, 0, 0);
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">The command.</param>
        /// <returns>The List.</returns>
        public List<T> ExecuteList<T>(DbCommand command) where T : new()
        {
            var converter = this.GetDataReaderConverter<T>();
            return this.ExecuteList<T>(command, converter);
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="converter">The converter.</param>
        /// <returns>
        /// The List.
        /// </returns>
        public List<T> ExecuteList<T>(Converter<DbDataReader, T> converter)
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteList<T>(Command, converter);
        }

        /// <summary>
        /// Executes the command and fills a list.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <returns>
        /// The List.
        /// </returns>
        public List<T> ExecuteList<T>() where T : new()
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteList<T>(Command);
        }

        /// <summary>
        /// Executes the command and returns the number of rows updated.
        /// </summary>
        /// <param name="command">   The command.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The <see cref="int"/>.</returns>
        public int ExecuteNonQuery(DbCommand command, DbConnection connection)
        {
            command.Connection = connection;
            return command.ExecuteNonQuery();
        }

        /// <summary>
        /// Executes the command and returns the number of rows updated.
        /// </summary>
        /// <returns></returns>
        public int ExecuteNonQuery()
        {
            return ExecuteNonQuery(Command);
        }

        /// <summary>
        /// Executes the command and returns the number of rows updated.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The <see cref="int"/>.</returns>
        public int ExecuteNonQuery(DbCommand command)
        {
            int affectedRows;

            using (DbConnection connection = this.CreateConnection())
            {
                try
                {
                    OperationsBeforeExecution();

                    connection.Open();

                    affectedRows = this.ExecuteNonQuery(command, connection);

                    connection.Close();
                }
                catch
                {
                    if (command != null)
                    {
                        command.Dispose();
                    }
                    if (connection != null)
                    {
                        connection.Close();
                        connection.Dispose();
                    }

                    throw;
                }
            }

            return affectedRows;
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">   The command.</param>
        /// <param name="converter"> The converter.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteObject<T>(DbCommand command, Converter<DbDataReader, T> converter, DbConnection connection)
        {
            T o;

            using (DbDataReader reader = this.ExecuteReader(command, connection))
            {
                if (reader.Read())
                {
                    o = converter(reader);
                }
                else
                {
                    o = default(T);
                }

                reader.Close();
            }

            return o;
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">  The command.</param>
        /// <param name="converter">The converter.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteObject<T>(DbCommand command, Converter<DbDataReader, T> converter)
        {
            T o;

            using (DbConnection connection = this.CreateConnection())
            {
                try
                {
                    OperationsBeforeExecution();

                    connection.Open();

                    o = this.ExecuteObject<T>(command, converter, connection);

                    connection.Close();
                }
                catch
                {
                    if (command != null)
                    {
                        command.Dispose();
                    }
                    if (connection != null)
                    {
                        connection.Close();
                        connection.Dispose();
                    }

                    throw;
                }
            }

            return o;
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">   The command.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteObject<T>(DbCommand command, DbConnection connection) where T : new()
        {
            var converter = this.GetDataReaderConverter<T>();
            return this.ExecuteObject(command, converter, connection);
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">The command.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteObject<T>(DbCommand command) where T : new()
        {
            var converter = this.GetDataReaderConverter<T>();
            return this.ExecuteObject(command, converter);
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="converter">The converter.</param>
        /// <returns>
        /// The generic type.
        /// </returns>
        public T ExecuteObject<T>(Converter<DbDataReader, T> converter)
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteObject(Command, converter);
        }

        /// <summary>
        /// Executes the command and returns an object.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <returns>
        /// The generic type.
        /// </returns>
        public T ExecuteObject<T>() where T : new()
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteObject<T>(Command);
        }

        /// <summary>
        /// Executes the command and returns a reader.
        /// </summary>
        /// <param name="command">   The command.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The <see cref="DbDataReader"/>.</returns>
        private DbDataReader ExecuteReader(DbCommand command, DbConnection connection)
        {
            command.Connection = connection;

            DbDataReader reader = null;

            try
            {
                OperationsBeforeExecution();

                reader = command.ExecuteReader(CommandBehavior.CloseConnection);

                string commandAndParameters = command.CommandText;
                if (command.Parameters != null)
                {
                    for (int i = 0; i < command.Parameters.Count; i++)
                    {
                        var p = command.Parameters[i];
                        commandAndParameters += $", {p.ParameterName} = {p.Value}";
                    }
                }

                return reader;
            }
            catch
            {
                if (reader != null)
                {
                    reader.Close();
                    reader.Dispose();
                }
                if (command != null)
                {
                    command.Dispose();
                }
                if (connection != null)
                {
                    connection.Close();
                    connection.Dispose();
                }

                throw;
            }
        }

        /// <summary>
        /// Executes the command and returns a reader.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns>The <see cref="DbDataReader"/>.</returns>
        private DbDataReader ExecuteReader(DbCommand command)
        {
            DbConnection connection = this.CreateConnection();
            connection.Open();

            return this.ExecuteReader(command, connection);
        }

        /// <summary>
        /// Executes the command and returns a reader.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <returns>The <see cref="DbDataReader"/>.</returns>
        private DbDataReader ExecuteReader()
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteReader(Command);
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">   The command.</param>
        /// <param name="converter"> The converter.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteScalar<T>(DbCommand command, Converter<object, T> converter, DbConnection connection)
        {
            command.Connection = connection;
            var value = command.ExecuteScalar();
            return converter(value);
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">  The command.</param>
        /// <param name="converter">The converter.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteScalar<T>(DbCommand command, Converter<object, T> converter)
        {
            T o;

            using (DbConnection connection = this.CreateConnection())
            {
                try
                {
                    OperationsBeforeExecution();

                    connection.Open();

                    o = this.ExecuteScalar<T>(command, converter, connection);

                    connection.Close();
                }
                catch
                {
                    if (command != null)
                    {
                        command.Dispose();
                    }
                    if (connection != null)
                    {
                        connection.Close();
                        connection.Dispose();
                    }

                    throw;
                }
            }

            return o;
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">   The command.</param>
        /// <param name="connection">The connection.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteScalar<T>(DbCommand command, DbConnection connection)
        {
            return this.ExecuteScalar<T>(command, this.GetTypeConverter<T>(), connection);
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="command">The command.</param>
        /// <returns>The generic type.</returns>
        public T ExecuteScalar<T>(DbCommand command)
        {
            return this.ExecuteScalar(command, this.GetTypeConverter<T>());
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <returns>
        /// The generic type.
        /// </returns>
        public T ExecuteScalar<T>()
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteScalar<T>(Command);
        }

        /// <summary>
        /// Executes the command and returns a value.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <param name="converter">The converter.</param>
        /// <returns>
        /// The generic type.
        /// </returns>
        public T ExecuteScalar<T>(Converter<object, T> converter)
        {
            //var command = this.CreateCommand(CommandText);
            return this.ExecuteScalar(Command, converter);
        }

        /// <summary>
        /// Rollback and dispose the transaction
        /// </summary>
        /// <param name="transaction">the transaction to rollback</param>
        public void RollbackTransaction(DbTransaction transaction)
        {
            if (transaction != null)
            {
                transaction.Rollback();

                if (transaction.Connection != null && transaction.Connection.State != ConnectionState.Closed)
                    transaction.Connection.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// Adds a value to the end of the <see cref="DbQueryMapper.Parameters"/> property.
        /// </summary>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
        /// <param name="type">Type of parameter.</param>
        /// <param name="size">Size of parameter</param>
        /// <returns></returns>
        public virtual DbQueryMapper AddParameter(string name, object value, System.Data.DbType? type, int? size)
        {
            var dbCommand = this.Command;
            var param = dbCommand.CreateParameter();

            param.ParameterName = name;
            param.Value = value ?? DBNull.Value;
            if (type.HasValue) param.DbType = type.Value;
            if (size.HasValue && size > 0) param.Size = size.Value;

            dbCommand.Parameters.Add(param);

            return this;
        }

        /// <summary>
        /// Adds a value to the end of the <see cref="DbQueryMapper.Parameters"/> property.
        /// </summary>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
        /// <returns></returns>
        public virtual DbQueryMapper AddParameter(string name, object value)
        {
            return AddParameter(name, value, null, null);
        }

        /// <summary>
        /// Adds a value to the end of the <see cref="DbCommand.Parameters"/> property.
        /// </summary>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="value">The value to be added. Null value will be replaced by System.DBNull.Value.</param>
        /// <param name="type">Type of parameter.</param>
        /// <returns></returns>
        public virtual DbQueryMapper AddParameter(string name, object value, DbType type)
        {
            return AddParameter(name, value, type, null);
        }

        /// <summary>
        /// Add all properties / values to the end of the <see cref="DbCommand.Parameters"/> property.
        /// If a property is already exist in Parameters collection, the parameter is removed and new added with new value.
        /// </summary>
        /// <param name="values">Object or anonymous object to convert all properties to parameters</param>
        public virtual DbQueryMapper AddParameter<T>(T values)
        {
            DbParameters.AddValues<T>(this.Command, values);
            return this;
        }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Fills from a reader.
        /// </summary>
        /// <param name="reader">     The reader.</param>
        /// <param name="startRecord">The start record.</param>
        /// <param name="maxRecords"> The max records.</param>
        /// <param name="action">     The action.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// startRecord;StartRecord must be zero or higher.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        protected static void FillFromReader(DbDataReader reader, int startRecord, int maxRecords, Action<DbDataReader> action)
        {
            if (startRecord < 0)
                throw new ArgumentOutOfRangeException("startRecord", "StartRecord must be zero or higher.");

            while (startRecord > 0)
            {
                if (!reader.Read())
                    return;

                startRecord--;
            }

            if (maxRecords > 0)
            {
                int i = 0;

                while (i < maxRecords && reader.Read())
                {
                    action(reader);
                    i++;
                }
            }
            else
            {
                while (reader.Read())
                    action(reader);
            }
        }

        /// <summary>
        /// Creates the parameter name.
        /// </summary>
        /// <param name="index">The index.</param>
        /// <returns>The <see cref="string"/>.</returns>
        protected virtual string CreateParameterName(int index)
        {
            if (_parameterFormat == null)
                _parameterFormat = GetProviderParameterFormatString();

            return String.Format(_parameterFormat, index);
        }

        /// <summary>
        /// Gets the data reader converter.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <returns>The Converter.</returns>
        protected virtual Converter<DbDataReader, T> GetDataReaderConverter<T>()
            where T : new()
        {
            return new DbReaderConverter<T>().Convert;
        }

        /// <summary>
        /// The get type converter.
        /// </summary>
        /// <typeparam name="T">The generic type</typeparam>
        /// <returns>The Converter.</returns>
        protected virtual Converter<object, T> GetTypeConverter<T>()
        {
            return (object o) => (T)ObjectConverter.To<T>(o);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Gets the provider parameter format string.
        /// </summary>
        /// <returns>The <see cref="string"/>.</returns>
        private string GetProviderParameterFormatString()
        {
            var builder = Factory.CreateCommandBuilder();
            var type = builder.GetType();
            var method = type.GetMethod("GetParameterPlaceholder", BindingFlags.NonPublic | BindingFlags.Instance);
            var index = 42;
            var parameterName = method.Invoke(builder, new object[] { index }).ToString();
            return parameterName.Replace(index.ToString(CultureInfo.InvariantCulture), "{0}");
        }

        #endregion
    }
}
